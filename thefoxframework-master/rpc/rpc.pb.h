// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace thefox {
namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class Call;
class Reply;
class OnewayMessage;
class Box;
class Placeholder;
class HeartBeath;
class RpcList;

enum Reply_Result {
  Reply_Result_kOk = 0,
  Reply_Result_kError = 1,
  Reply_Result_kServiceNotFound = 2,
  Reply_Result_kMethodNotFound = 3,
  Reply_Result_kClientFailed = 4,
  Reply_Result_kTimeout = 5
};
bool Reply_Result_IsValid(int value);
const Reply_Result Reply_Result_Result_MIN = Reply_Result_kOk;
const Reply_Result Reply_Result_Result_MAX = Reply_Result_kTimeout;
const int Reply_Result_Result_ARRAYSIZE = Reply_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_Result_descriptor();
inline const ::std::string& Reply_Result_Name(Reply_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_Result_descriptor(), value);
}
inline bool Reply_Result_Parse(
    const ::std::string& name, Reply_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_Result>(
    Reply_Result_descriptor(), name, value);
}
// ===================================================================

class Call : public ::google::protobuf::Message {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  void Swap(Call* other);

  // implements Message ----------------------------------------------

  Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required string service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  inline void set_allocated_service(::std::string* service);

  // required string method = 3;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional bytes request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  inline void set_allocated_request(::std::string* request);

  // optional int32 timeout = 5 [default = 30000];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 5;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:thefox.rpc.Call)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* service_;
  ::std::string* method_;
  ::std::string* request_;
  ::google::protobuf::int32 timeout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Call* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_Result Result;
  static const Result kOk = Reply_Result_kOk;
  static const Result kError = Reply_Result_kError;
  static const Result kServiceNotFound = Reply_Result_kServiceNotFound;
  static const Result kMethodNotFound = Reply_Result_kMethodNotFound;
  static const Result kClientFailed = Reply_Result_kClientFailed;
  static const Result kTimeout = Reply_Result_kTimeout;
  static inline bool Result_IsValid(int value) {
    return Reply_Result_IsValid(value);
  }
  static const Result Result_MIN =
    Reply_Result_Result_MIN;
  static const Result Result_MAX =
    Reply_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    Reply_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return Reply_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return Reply_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return Reply_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .thefox.rpc.Reply.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::thefox::rpc::Reply_Result result() const;
  inline void set_result(::thefox::rpc::Reply_Result value);

  // optional bytes response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:thefox.rpc.Reply)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* response_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// -------------------------------------------------------------------

class OnewayMessage : public ::google::protobuf::Message {
 public:
  OnewayMessage();
  virtual ~OnewayMessage();

  OnewayMessage(const OnewayMessage& from);

  inline OnewayMessage& operator=(const OnewayMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnewayMessage& default_instance();

  void Swap(OnewayMessage* other);

  // implements Message ----------------------------------------------

  OnewayMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnewayMessage& from);
  void MergeFrom(const OnewayMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:thefox.rpc.OnewayMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static OnewayMessage* default_instance_;
};
// -------------------------------------------------------------------

class Box : public ::google::protobuf::Message {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box& default_instance();

  void Swap(Box* other);

  // implements Message ----------------------------------------------

  Box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .thefox.rpc.Call call = 1;
  inline bool has_call() const;
  inline void clear_call();
  static const int kCallFieldNumber = 1;
  inline const ::thefox::rpc::Call& call() const;
  inline ::thefox::rpc::Call* mutable_call();
  inline ::thefox::rpc::Call* release_call();
  inline void set_allocated_call(::thefox::rpc::Call* call);

  // optional .thefox.rpc.Reply reply = 2;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 2;
  inline const ::thefox::rpc::Reply& reply() const;
  inline ::thefox::rpc::Reply* mutable_reply();
  inline ::thefox::rpc::Reply* release_reply();
  inline void set_allocated_reply(::thefox::rpc::Reply* reply);

  // optional .thefox.rpc.OnewayMessage oneway = 3;
  inline bool has_oneway() const;
  inline void clear_oneway();
  static const int kOnewayFieldNumber = 3;
  inline const ::thefox::rpc::OnewayMessage& oneway() const;
  inline ::thefox::rpc::OnewayMessage* mutable_oneway();
  inline ::thefox::rpc::OnewayMessage* release_oneway();
  inline void set_allocated_oneway(::thefox::rpc::OnewayMessage* oneway);

  // @@protoc_insertion_point(class_scope:thefox.rpc.Box)
 private:
  inline void set_has_call();
  inline void clear_has_call();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_oneway();
  inline void clear_has_oneway();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::thefox::rpc::Call* call_;
  ::thefox::rpc::Reply* reply_;
  ::thefox::rpc::OnewayMessage* oneway_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Box* default_instance_;
};
// -------------------------------------------------------------------

class Placeholder : public ::google::protobuf::Message {
 public:
  Placeholder();
  virtual ~Placeholder();

  Placeholder(const Placeholder& from);

  inline Placeholder& operator=(const Placeholder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Placeholder& default_instance();

  void Swap(Placeholder* other);

  // implements Message ----------------------------------------------

  Placeholder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Placeholder& from);
  void MergeFrom(const Placeholder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:thefox.rpc.Placeholder)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Placeholder* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeath : public ::google::protobuf::Message {
 public:
  HeartBeath();
  virtual ~HeartBeath();

  HeartBeath(const HeartBeath& from);

  inline HeartBeath& operator=(const HeartBeath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeath& default_instance();

  void Swap(HeartBeath* other);

  // implements Message ----------------------------------------------

  HeartBeath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeath& from);
  void MergeFrom(const HeartBeath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:thefox.rpc.HeartBeath)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static HeartBeath* default_instance_;
};
// -------------------------------------------------------------------

class RpcList : public ::google::protobuf::Message {
 public:
  RpcList();
  virtual ~RpcList();

  RpcList(const RpcList& from);

  inline RpcList& operator=(const RpcList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcList& default_instance();

  void Swap(RpcList* other);

  // implements Message ----------------------------------------------

  RpcList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcList& from);
  void MergeFrom(const RpcList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string service = 1;
  inline int service_size() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::std::string& service(int index) const;
  inline ::std::string* mutable_service(int index);
  inline void set_service(int index, const ::std::string& value);
  inline void set_service(int index, const char* value);
  inline void set_service(int index, const char* value, size_t size);
  inline ::std::string* add_service();
  inline void add_service(const ::std::string& value);
  inline void add_service(const char* value);
  inline void add_service(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& service() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service();

  // @@protoc_insertion_point(class_scope:thefox.rpc.RpcList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> service_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static RpcList* default_instance_;
};
// ===================================================================

class RpcService_Stub;

class RpcService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RpcService() {};
 public:
  virtual ~RpcService();

  typedef RpcService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void heartBeath(::google::protobuf::RpcController* controller,
                       const ::thefox::rpc::HeartBeath* request,
                       ::thefox::rpc::HeartBeath* response,
                       ::google::protobuf::Closure* done);
  virtual void listRpc(::google::protobuf::RpcController* controller,
                       const ::thefox::rpc::Placeholder* request,
                       ::thefox::rpc::RpcList* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService);
};

class RpcService_Stub : public RpcService {
 public:
  RpcService_Stub(::google::protobuf::RpcChannel* channel);
  RpcService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RpcService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RpcService ------------------------------------------

  void heartBeath(::google::protobuf::RpcController* controller,
                       const ::thefox::rpc::HeartBeath* request,
                       ::thefox::rpc::HeartBeath* response,
                       ::google::protobuf::Closure* done);
  void listRpc(::google::protobuf::RpcController* controller,
                       const ::thefox::rpc::Placeholder* request,
                       ::thefox::rpc::RpcList* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService_Stub);
};


// ===================================================================


// ===================================================================

// Call

// required int64 id = 1;
inline bool Call::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Call::id() const {
  return id_;
}
inline void Call::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required string service = 2;
inline bool Call::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& Call::service() const {
  return *service_;
}
inline void Call::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void Call::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void Call::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Call::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* Call::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Call::set_allocated_service(::std::string* service) {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (service) {
    set_has_service();
    service_ = service;
  } else {
    clear_has_service();
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string method = 3;
inline bool Call::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Call::method() const {
  return *method_;
}
inline void Call::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Call::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Call::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Call::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Call::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Call::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes request = 4;
inline bool Call::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Call::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Call::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Call::clear_request() {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& Call::request() const {
  return *request_;
}
inline void Call::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void Call::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void Call::set_request(const void* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Call::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  return request_;
}
inline ::std::string* Call::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Call::set_allocated_request(::std::string* request) {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (request) {
    set_has_request();
    request_ = request;
  } else {
    clear_has_request();
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timeout = 5 [default = 30000];
inline bool Call::has_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Call::set_has_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Call::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Call::clear_timeout() {
  timeout_ = 30000;
  clear_has_timeout();
}
inline ::google::protobuf::int32 Call::timeout() const {
  return timeout_;
}
inline void Call::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// Reply

// required int64 id = 1;
inline bool Reply::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Reply::id() const {
  return id_;
}
inline void Reply::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required .thefox.rpc.Reply.Result result = 2;
inline bool Reply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::thefox::rpc::Reply_Result Reply::result() const {
  return static_cast< ::thefox::rpc::Reply_Result >(result_);
}
inline void Reply::set_result(::thefox::rpc::Reply_Result value) {
  assert(::thefox::rpc::Reply_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bytes response = 3;
inline bool Reply::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reply::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reply::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reply::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& Reply::response() const {
  return *response_;
}
inline void Reply::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void Reply::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void Reply::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Reply::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* Reply::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Reply::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OnewayMessage

// required string type = 1;
inline bool OnewayMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnewayMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnewayMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnewayMessage::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& OnewayMessage::type() const {
  return *type_;
}
inline void OnewayMessage::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void OnewayMessage::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void OnewayMessage::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OnewayMessage::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* OnewayMessage::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OnewayMessage::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes body = 2;
inline bool OnewayMessage::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnewayMessage::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnewayMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnewayMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& OnewayMessage::body() const {
  return *body_;
}
inline void OnewayMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void OnewayMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void OnewayMessage::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OnewayMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* OnewayMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OnewayMessage::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Box

// optional .thefox.rpc.Call call = 1;
inline bool Box::has_call() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box::set_has_call() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box::clear_has_call() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box::clear_call() {
  if (call_ != NULL) call_->::thefox::rpc::Call::Clear();
  clear_has_call();
}
inline const ::thefox::rpc::Call& Box::call() const {
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
inline ::thefox::rpc::Call* Box::mutable_call() {
  set_has_call();
  if (call_ == NULL) call_ = new ::thefox::rpc::Call;
  return call_;
}
inline ::thefox::rpc::Call* Box::release_call() {
  clear_has_call();
  ::thefox::rpc::Call* temp = call_;
  call_ = NULL;
  return temp;
}
inline void Box::set_allocated_call(::thefox::rpc::Call* call) {
  delete call_;
  call_ = call;
  if (call) {
    set_has_call();
  } else {
    clear_has_call();
  }
}

// optional .thefox.rpc.Reply reply = 2;
inline bool Box::has_reply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box::set_has_reply() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box::clear_has_reply() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box::clear_reply() {
  if (reply_ != NULL) reply_->::thefox::rpc::Reply::Clear();
  clear_has_reply();
}
inline const ::thefox::rpc::Reply& Box::reply() const {
  return reply_ != NULL ? *reply_ : *default_instance_->reply_;
}
inline ::thefox::rpc::Reply* Box::mutable_reply() {
  set_has_reply();
  if (reply_ == NULL) reply_ = new ::thefox::rpc::Reply;
  return reply_;
}
inline ::thefox::rpc::Reply* Box::release_reply() {
  clear_has_reply();
  ::thefox::rpc::Reply* temp = reply_;
  reply_ = NULL;
  return temp;
}
inline void Box::set_allocated_reply(::thefox::rpc::Reply* reply) {
  delete reply_;
  reply_ = reply;
  if (reply) {
    set_has_reply();
  } else {
    clear_has_reply();
  }
}

// optional .thefox.rpc.OnewayMessage oneway = 3;
inline bool Box::has_oneway() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Box::set_has_oneway() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Box::clear_has_oneway() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Box::clear_oneway() {
  if (oneway_ != NULL) oneway_->::thefox::rpc::OnewayMessage::Clear();
  clear_has_oneway();
}
inline const ::thefox::rpc::OnewayMessage& Box::oneway() const {
  return oneway_ != NULL ? *oneway_ : *default_instance_->oneway_;
}
inline ::thefox::rpc::OnewayMessage* Box::mutable_oneway() {
  set_has_oneway();
  if (oneway_ == NULL) oneway_ = new ::thefox::rpc::OnewayMessage;
  return oneway_;
}
inline ::thefox::rpc::OnewayMessage* Box::release_oneway() {
  clear_has_oneway();
  ::thefox::rpc::OnewayMessage* temp = oneway_;
  oneway_ = NULL;
  return temp;
}
inline void Box::set_allocated_oneway(::thefox::rpc::OnewayMessage* oneway) {
  delete oneway_;
  oneway_ = oneway;
  if (oneway) {
    set_has_oneway();
  } else {
    clear_has_oneway();
  }
}

// -------------------------------------------------------------------

// Placeholder

// -------------------------------------------------------------------

// HeartBeath

// -------------------------------------------------------------------

// RpcList

// repeated string service = 1;
inline int RpcList::service_size() const {
  return service_.size();
}
inline void RpcList::clear_service() {
  service_.Clear();
}
inline const ::std::string& RpcList::service(int index) const {
  return service_.Get(index);
}
inline ::std::string* RpcList::mutable_service(int index) {
  return service_.Mutable(index);
}
inline void RpcList::set_service(int index, const ::std::string& value) {
  service_.Mutable(index)->assign(value);
}
inline void RpcList::set_service(int index, const char* value) {
  service_.Mutable(index)->assign(value);
}
inline void RpcList::set_service(int index, const char* value, size_t size) {
  service_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcList::add_service() {
  return service_.Add();
}
inline void RpcList::add_service(const ::std::string& value) {
  service_.Add()->assign(value);
}
inline void RpcList::add_service(const char* value) {
  service_.Add()->assign(value);
}
inline void RpcList::add_service(const char* value, size_t size) {
  service_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RpcList::service() const {
  return service_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RpcList::mutable_service() {
  return &service_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace thefox

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::thefox::rpc::Reply_Result>() {
  return ::thefox::rpc::Reply_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
